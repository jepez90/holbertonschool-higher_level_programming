===============================
 test for matrix_mul function
===============================

this function could be works when is called with two list of lists as arguments.

    >>> file_name = '100-matrix_mul'
    >>> function = __import__(file_name).matrix_mul
    >>> doc_module = __import__(file_name).__doc__

Documentation
===============================

Function is documented
    >>> function.__doc__ != None and function.__doc__.count(' ') > 4
    True

Modulo is Documented
    >>> doc_module != None and doc_module.count(' ') > 4
    True

Holberton Requirements
===============================

first line is #!/usr/bin/python3
    >>> with open(file_name + '.py') as f: print(f.readline())
    #!/usr/bin/python3
    <BLANKLINE>

pep8
    >>> import os
    >>> os.system('pep8 ' + file_name + '.py')
    0

Lists with errors
==============================

first argument is not a list
    >>> function(2, [[1], [2]] )
    Traceback (most recent call last):
    TypeError: m_a must be a list

second argument is not a list
    >>> function([[1], [2]] , 2)
    Traceback (most recent call last):
    TypeError: m_b must be a list

firt argument is a list of many types
    >>> function([[1], "hola"] , [[1],[2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

second argument is a list of many types
    >>> function([[1],[2]], [[1], "hola"])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

firt argument is an empty list of lists
    >>> function([[]], [[1],[2]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

second argument is an empty list of lists
    >>> function([[1],[2]], [])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

first argument has a list of none integers
    >>> function([[1],[2.3], ['a']], [[3, 4],[5, 6]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

second argument has a list of none integers
    >>> function([[1],[2]], [[3, "4"],[5, 6]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

first argument is not a rectangle
    >>> function([[1],[2, 3]], [[3, 4],[5, 6]])
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

second argument is not a rectangle
    >>> function([[1],[2]], [[3, 4],[5, 6, 7]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

the arguments can't be multiplied
    >>> function([[1, 2],[3, 4]], [[5, 6],[7, 8], [9, 10]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

corect output
==============================

    >>> function([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

    >>> function( [[1, 2], [3, 4], [3, 4]] ,  [[5, 6, 1], [7, 8, 2]])
    [[19, 22, 5], [43, 50, 11], [43, 50, 11]]
